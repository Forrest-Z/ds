#pragma once

#include "g2o_types/vertex_pose.h"
#include "teb_config.h"

#include "g2o/core/base_unary_edge.h"


/**
 * @class EdgeViaPoint
 * @brief Edge defining the cost function for pushing a configuration towards a via point
 * 
 * The edge depends on a single vertex \f$ \mathbf{s}_i \f$ and minimizes: \n
 * \f$ \min  dist2point \cdot weight \f$. \n
 * \e dist2point denotes the distance to the via point. \n
 * \e weight can be set using setInformation(). \n
 * @see TebOptimalPlanner::AddEdgesViaPoints
 * @remarks Do not forget to call setTebConfig() and setViaPoint()
 */     
class EdgeViaPoint : public g2o::BaseUnaryEdge<1, const Eigen::Vector2d*, VertexPose>
{
public:
    
  EdgeViaPoint() 
  {
    _measurement = NULL;
    _vertices[0] = NULL;
  }

  virtual ~EdgeViaPoint() 
  {
    if(_vertices[0]) 
      _vertices[0]->edges().erase(this);
  }

  void computeError()
  {
    const VertexPose* bandpt = static_cast<const VertexPose*>(_vertices[0]);
    _error[0] = (bandpt->position() - *_measurement).norm();
  }
  
  ErrorVector& getError()
  {
    computeError();
    return _error;
  }
  
  virtual bool read(std::istream& is)
  {
    return true;
  }

  virtual bool write(std::ostream& os) const
  {
    return os.good();
  }
  
  void setViaPoint(const Eigen::Vector2d* via_point)
  {
    _measurement = via_point;
  }
    
  void setTebConfig(const TebConfig& cfg)
  {
      cfg_ = &cfg;
  }

  void setParameters(const TebConfig& cfg, const Eigen::Vector2d* via_point)
  {
    cfg_ = &cfg;
    _measurement = via_point;
  }
  
protected:

  const TebConfig* cfg_;
  
public: 	
  EIGEN_MAKE_ALIGNED_OPERATOR_NEW

};
  
