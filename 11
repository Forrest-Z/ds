
#include "visualization.h"


TebVisualization::TebVisualization(ros::NodeHandle& nh) : initialized_(false)
{
  initialize(nh);
}

void TebVisualization::initialize(ros::NodeHandle& nh)
{
  if (initialized_)
    ROS_WARN("TebVisualization already initialized. Reinitalizing...");
  
  // register topics
  teb_poses_pub_ = nh.advertise<geometry_msgs::PoseArray>("teb_poses", 100);
  teb_marker_pub_ = nh.advertise<visualization_msgs::Marker>("teb_markers", 1000);
  
  initialized_ = true; 
}


void TebVisualization::publishLocalPlanAndPoses(const TimedElasticBand& teb) const
{
  
    // create pose_array (along trajectory)
    geometry_msgs::PoseArray teb_poses;
    teb_poses.header.frame_id = "base_link";
    teb_poses.header.stamp = ros::Time::now();
    
    // fill path msgs with teb configurations
    for (unsigned int i=0; i < teb.sizePoses(); i++)
    {
      geometry_msgs::PoseStamped pose;
      pose.header.frame_id = "base_link";
      pose.header.stamp = teb_poses.header.stamp;
      pose.pose.position.x = teb.Pose(i).x();
      pose.pose.position.y = teb.Pose(i).y();
      pose.pose.position.z = 0;
      pose.pose.orientation = tf::createQuaternionMsgFromYaw(teb.Pose(i).theta());
      teb_poses.poses.push_back(pose.pose);
    }
    teb_poses_pub_.publish(teb_poses);
} 

void TebVisualization::publishViaPoints(const std::vector<PoseSE2>& initial_plan, const std::string& ns) const
{
  if ( initial_plan.empty())
    return;
  
  visualization_msgs::Marker marker;
  marker.header.frame_id = "base_link";
  marker.header.stamp = ros::Time::now();
  marker.ns = ns;
  marker.id = 0;
  marker.type = visualization_msgs::Marker::POINTS;
  marker.action = visualization_msgs::Marker::ADD;
  marker.lifetime = ros::Duration(2.0);
  
  for (std::size_t i=0; i < initial_plan.size(); ++i)
  {
    geometry_msgs::Point point;
    point.x = initial_plan[i].x();
    point.y = initial_plan[i].y();
    point.z = 0;
    marker.points.push_back(point);
  }
  
  marker.scale.x = 0.1;
  marker.scale.y = 0.1;
  marker.color.a = 1.0;
  marker.color.r = 0.0;
  marker.color.g = 0.0;
  marker.color.b = 1.0;

  teb_marker_pub_.publish( marker );
}
