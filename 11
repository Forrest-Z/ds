
#pragma once

#include <math.h>
#include <ros/ros.h>
// teb stuff
#include "teb_config.h"
// #include "misc.h"
#include "timed_elastic_band.h"

#include <Eigen/Core>
#include <Eigen/StdVector>
#include <Eigen/Geometry>

#include "visualization.h"
// g2o lib stuff
#include "g2o/core/sparse_optimizer.h"
#include "g2o/core/block_solver.h"
#include "g2o/core/factory.h"
#include "g2o/core/optimization_algorithm_gauss_newton.h"
#include "g2o/core/optimization_algorithm_levenberg.h"
#include "g2o/solvers/csparse/linear_solver_csparse.h"
#include "g2o/solvers/cholmod/linear_solver_cholmod.h"

// g2o custom edges and vertices for the TEB planner
#include "g2o_types/edge_velocity.h"
#include "g2o_types/edge_acceleration.h"
#include "g2o_types/edge_kinematics.h"
#include "g2o_types/edge_time_optimal.h"
#include "g2o_types/edge_via_point.h"
#include <boost/make_shared.hpp>

#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>

using namespace cv;
using namespace Eigen;


typedef g2o::BlockSolver< g2o::BlockSolverTraits<-1, -1> >  TEBBlockSolver;
typedef g2o::LinearSolverCSparse<TEBBlockSolver::PoseMatrixType> TEBLinearSolver;
typedef std::vector< Eigen::Vector2d, Eigen::aligned_allocator<Eigen::Vector2d> > ViaPointContainer;

class TebOptimalPlanner
{
public:
  TebOptimalPlanner(ros::NodeHandle& nh);
  virtual ~TebOptimalPlanner();
  
  bool plan(const std::vector<PoseSE2>& initial_plan);    
  bool optimizeTEB(int m, int n);
  void clearPlanner();
  void printTeb();
  void show();
  
  void registerG2OTypes();
  
  TimedElasticBand& teb() {return teb_;};
  const TimedElasticBand& teb() const {return teb_;};
  	
protected:
  bool buildGraph();
  bool optimizeGraph(int no_iterations);
  void clearGraph();
  
  void AddTEBVertices();
  void AddEdgesVelocity();
  void AddEdgesAcceleration();
  void AddEdgesTimeOptimal();
  void AddEdgesKinematicsCarlike();
  void AddEdgesViaPoints();
  
  boost::shared_ptr<g2o::SparseOptimizer> initOptimizer();
    
  TebConfig cfg_; //!< Config class that stores and manages all related parameters
   
  TimedElasticBand teb_; //!< Actual trajectory object
  boost::shared_ptr<g2o::SparseOptimizer> optimizer_;
  ViaPointContainer via_points;
  ViaPointContainer* via_points_;
  Mat map;
  unsigned int m_map_width;
  unsigned int m_map_height;
  void setViaPoints(const std::vector<PoseSE2>& initial_plan);
  void mapToEmpty();
  void mapShow();
  void mapChange(const std::vector<PoseSE2>& initial_plan);
  void mapChange();
  void g2oInitNewVersion();
  void g2oInitOldVersion();
  TebVisualization *visual;
  std::vector<PoseSE2> initial_plan_;

public:
  EIGEN_MAKE_ALIGNED_OPERATOR_NEW    
};
