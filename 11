#pragma once

#include "g2o/config.h"
#include "g2o/core/base_vertex.h"
#include "g2o/core/hyper_graph_action.h"

#include <Eigen/Core>

class VertexTimeDiff : public g2o::BaseVertex<1, double>
{
public:

  VertexTimeDiff(bool fixed = false)
  {
    setToOriginImpl();
    setFixed(fixed);
  }
   
  VertexTimeDiff(double dt, bool fixed = false)
  {
    _estimate = dt;
    setFixed(fixed);
  }

  ~VertexTimeDiff()
  {}

  /**
    * @brief Access the timediff value of the vertex
    * @see estimate
    * @return reference to dt
    */ 
  double& dt() {return _estimate;}
  const double& dt() const {return _estimate;}
  
  virtual void setToOriginImpl()
  {
    _estimate = 0.1;
  }

  virtual void oplusImpl(const double* update)
  {
      _estimate += *update;
  }

  virtual bool read(std::istream& is)
  {
    is >> _estimate;
    return true;
  }

  virtual bool write(std::ostream& os) const
  {
    os << estimate();
    return os.good();
  }

  EIGEN_MAKE_ALIGNED_OPERATOR_NEW
};

