
#pragma once

#include "g2o_types/vertex_pose.h"
#include "g2o_types/penalties.h"
#include "teb_config.h"
#include "g2o/core/base_binary_edge.h"
#include <cmath>

   
class EdgeKinematicsCarlike : public g2o::BaseBinaryEdge<2, double, VertexPose, VertexPose>
{
public:

  EdgeKinematicsCarlike()
  {
      this->setMeasurement(0.);
      _vertices[0] = _vertices[1] = NULL;
  }
   
  virtual ~EdgeKinematicsCarlike()
  {
    for(unsigned int i=0;i<2;i++) 
    {
      if(_vertices[i])
        _vertices[i]->edges().erase(this);
    }
  }
 
  void computeError()
  {
    const VertexPose* conf1 = static_cast<const VertexPose*>(_vertices[0]);
    const VertexPose* conf2 = static_cast<const VertexPose*>(_vertices[1]);
    
    Eigen::Vector2d deltaS = conf2->position() - conf1->position();

    // non holonomic constraint
    _error[0] = fabs( ( cos(conf1->theta())+cos(conf2->theta()) ) * deltaS[1] - ( sin(conf1->theta())+sin(conf2->theta()) ) * deltaS[0] );

    // limit minimum turning radius
    double omega_t = g2o::normalize_theta( conf2->theta() - conf1->theta() );
    if (omega_t == 0)
      _error[1] = 0; // straight line motion
    else
      _error[1] = penaltyBoundFromBelow(deltaS.norm() / fabs(omega_t), cfg_->robot.min_turning_radius, 0.0); 
    // This edge is not affected by the epsilon parameter, the user might add an exra margin to the min_turning_radius parameter.
  }
        
  ErrorVector& getError()
  {
    computeError();
    return _error;
  }

  virtual bool read(std::istream& is)
  {
    is >> _measurement;
    //inverseMeasurement() = measurement() * -1;
    is >> information()(0,0);
    return true;
  }

  virtual bool write(std::ostream& os) const
  {
    //os << measurement() << " ";
    os << information()(0,0) << " Error NH-Constraint: " << _error[0] << ", Error PosDriveDir: " << _error[1];
    return os.good();
  }

  void setTebConfig(const TebConfig& cfg)
  {
    cfg_ = &cfg;
  }

protected:
  
  const TebConfig* cfg_; //!< Store TebConfig class for parameters
  
public:
  EIGEN_MAKE_ALIGNED_OPERATOR_NEW   
};


