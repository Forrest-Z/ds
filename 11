
#pragma once

#include "teb_config.h"
#include "timed_elastic_band.h"
#include <ros/ros.h>
#include <ros/publisher.h>

#include <boost/graph/adjacency_list.hpp>
#include <boost/graph/graph_traits.hpp>

#include <iterator>

#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/PoseArray.h>
#include <tf/transform_datatypes.h>
#include <visualization_msgs/Marker.h>
#include "pose_se2.h"
class TebOptimalPlanner; //!< Forward Declaration 
class TebVisualization
{
public:
  TebVisualization(ros::NodeHandle& nh);
  
  void initialize(ros::NodeHandle& nh);
  void publishLocalPlanAndPoses(const TimedElasticBand& teb) const;
  void publishViaPoints(const std::vector<PoseSE2>& initial_plan, const std::string& ns = "ViaPoints") const;
  
protected:

  ros::Publisher teb_poses_pub_; 
  ros::Publisher teb_marker_pub_; 
    
  bool initialized_; 

public:
    EIGEN_MAKE_ALIGNED_OPERATOR_NEW    
};
