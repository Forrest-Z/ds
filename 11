#pragma once

#include <float.h>

#include <g2o/core/base_unary_edge.h>

#include "g2o_types/vertex_timediff.h"
#include "g2o_types/penalties.h"
#include "teb_config.h"

#include <Eigen/Core>


class EdgeTimeOptimal : public g2o::BaseUnaryEdge<1, double, VertexTimeDiff>
{
public:
  EdgeTimeOptimal()
  {
    this->setMeasurement(0.);
    _vertices[0] = NULL;
  }
  
  virtual ~EdgeTimeOptimal()
  {
    if(_vertices[0]) 
      _vertices[0]->edges().erase(this); 
  }

  void computeError()
  {
    const VertexTimeDiff* timediff = static_cast<const VertexTimeDiff*>(_vertices[0]);

   _error[0] = timediff->dt();
  }

#ifdef USE_ANALYTIC_JACOBI
  /**
   * @brief Jacobi matrix of the cost function specified in computeError().
   */
  void linearizeOplus()
  {
    _jacobianOplusXi( 0 , 0 ) = 1;
  }
#endif
    
  ErrorVector& getError()
  {
    computeError();
    return _error;
  }
  
  virtual bool read(std::istream& is)
  {
    is >> _measurement;
    is >> information()(0,0);
    return true;
  }

  virtual bool write(std::ostream& os) const
  {
    os << information()(0,0) << " Error: " << _error[0]; 
    return os.good();
  }
    
  void setTebConfig(const TebConfig& cfg)
  {
    cfg_ = &cfg;
  }

protected:
  const TebConfig* cfg_; //!< Store TebConfig class for parameters
  
public:        
  EIGEN_MAKE_ALIGNED_OPERATOR_NEW
};

