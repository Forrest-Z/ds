
#include <ros/ros.h>
#include <visualization_msgs/Marker.h>
#include <iostream>
#include <vector>
#include <stdio.h>   
#include <stdlib.h>                         
#include <sys/time.h>   
#include <unistd.h> 

#include "constants.h"
#include "custom_types.h"
#include "reference_trajectory_planning.h"
#include "collision_detection.h"

//rosrun --prefix "gdb -ex run -args" apollo_dream apollo_node
using namespace Constants;
using namespace std;
void setLanePoints(std::vector<Point>& lanePoints);
std::vector<int> setKeyLanePoints(std::vector<Point>& lanePoints);
void pub_line_strip(const ros::Publisher& pub, const std::vector<Point>& points);
void pub_key_points(const ros::Publisher& pub, const std::vector<Point>& points);
void pub_seeds(const ros::Publisher& pub, const std::vector<std::vector<Vertex>>& seeds);
void setObstacles(std::vector<std::vector<Point>> &obstacles);
void pub_obstacles(const ros::Publisher& pub, const std::vector<std::vector<Point>>& seeds);
void markerInit(visualization_msgs::Marker& marker);
void test(const ros::Publisher& key_points_pub,const ros::Publisher& line_strip_pub);/////;
int  timeval_subtract(struct timeval* result, struct timeval* x, struct timeval* y);
void pub_spline_points(const ros::Publisher& pub, const std::vector<Point>& key_points);

int main(int argc, char **argv) 
{
    ros::init(argc, argv, "apollo_dream_node");
    ros::NodeHandle nh;
    ros::Publisher key_points_pub = nh.advertise<visualization_msgs::Marker>("marker_key_points", 1);
    ros::Publisher seeds_pub      = nh.advertise<visualization_msgs::Marker>("marker_seeds", 1);
    ros::Publisher line_strip_pub = nh.advertise<visualization_msgs::Marker>("marker_line_strip", 1);
    ros::Publisher obstacles_pub = nh.advertise<visualization_msgs::Marker>("marker_obstacle", 1);
    ros::Publisher spline_pub = nh.advertise<visualization_msgs::Marker>("marker_spline", 1);

    struct timeval t_start,t_end; 
    long cost_time = 0; 
    gettimeofday(&t_start, NULL); 
    long start = ((long)t_start.tv_sec)*1000+(long)t_start.tv_usec/1000;

    double time_begin =ros::Time::now().toSec();
    
    std::vector<std::vector<Point>> obstacles;
    setObstacles(obstacles);
    CollisionDetection collisionDetection;
    collisionDetection.obstaclesUpdate(obstacles);

    printf("hhh\n");

    ReferenceTrajectoryPlanning rtp(&collisionDetection);
    std::vector<Point> lanePoints;
    setLanePoints(lanePoints);
    rtp.m_lanePoints = lanePoints;printf("hhh\n");
    std::vector<Point> spline_points = rtp.generatePath(setKeyLanePoints(lanePoints));

    gettimeofday(&t_end, NULL); 
    long end = ((long)t_end.tv_sec)*1000+(long)t_end.tv_usec/1000; 
    cost_time = end - start; 
    double time_end =ros::Time::now().toSec();

    ros::Rate r(1);
    while (ros::ok())
    {
        // test(key_points_pub,line_strip_pub);/////;
        printf("\nlinux: cost time: %ld ms\n", cost_time); 
        printf("  ros: cost time: %f\n",(time_end-time_begin)*1000.0);
        pub_line_strip(line_strip_pub, rtp.testKeyPoints);
        pub_key_points(key_points_pub,lanePoints);
        pub_seeds(seeds_pub, rtp.testSeeds);
        pub_obstacles(obstacles_pub, obstacles);
        pub_spline_points(spline_pub,spline_points);
        r.sleep();
    }

    return 0;
}

void setLanePoints(std::vector<Point>& lanePoints)
{
    for(int i=0; i<600; ++i)
    {
        lanePoints.push_back(Point(i*0.1, 0, 0));
    }
}

std::vector<int> setKeyLanePoints(std::vector<Point>& lanePoints)
{
    std::vector<int> keyLanePoints;
    if(lanePoints.empty())
        return keyLanePoints;
    keyLanePoints.push_back(0);
    float s = 0.0;
    for(int i=1; i<lanePoints.size(); ++i)
    {
        s += sqrt(pow(lanePoints[i].x-lanePoints[i-1].x,2) + pow(lanePoints[i].y-lanePoints[i-1].y,2));
        if(s >= delta_l)
        {
            keyLanePoints.push_back(i);
            s = 0.0;
        }
    }
    if(s > 1e-9)
       keyLanePoints.push_back(lanePoints.size() - 1); 
}

void setObstacles(std::vector<std::vector<Point>> &obstacles)
{
    std::vector<Point> v1;
    std::vector<Point> v2;
    for(int i=0; i<50; ++i)
    {
        v1.push_back(Point(25, 0.1*i-3,0.0));
    }
    for(int i=-50; i<0; ++i)
    {
        v2.push_back(Point(10, 0.1*i,0.0));
    }
    obstacles.push_back(v1);
    obstacles.push_back(v2);
}

void test(const ros::Publisher& key_points_pub, const ros::Publisher& line_strip_pub)/////
{
    Point point1(0,0,0);
    Point point2(5,5,0);

    float x0 = (point1.x + point2.x)/2.0;
    float y0 = (point1.y + point2.y)/2.0;
    float l = (sqrt(pow(point2.x-point1.x, 2.0) + pow(point2.y-point1.y, 2.0)) + carWidth)/2;
    float w = carWidth/2;
    float theta = atan2(point2.y-point1.y, point2.x-point1.x);

    Point p01((x0-l-x0)*cos(theta)-(y0-w-y0)*sin(theta)+x0,(x0-l-x0)*sin(theta)+(y0-w-y0)*cos(theta)+y0,0.0);
    Point p02((x0+l-x0)*cos(theta)-(y0-w-y0)*sin(theta)+x0,(x0+l-x0)*sin(theta)+(y0-w-y0)*cos(theta)+y0,0.0);
    Point p03((x0+l-x0)*cos(theta)-(y0+w-y0)*sin(theta)+x0,(x0+l-x0)*sin(theta)+(y0+w-y0)*cos(theta)+y0,0.0);
    Point p04((x0-l-x0)*cos(theta)-(y0+w-y0)*sin(theta)+x0,(x0-l-x0)*sin(theta)+(y0+w-y0)*cos(theta)+y0,0.0);

    Point p1(x0-l,y0-w,0);
    Point p2(x0+l,y0-w,0);
    Point p3(x0+l,y0+w,0);
    Point p4(x0-l,y0+w,0);
    std::vector<Point> v0;
    v0.push_back(p1);
    v0.push_back(p2);
    v0.push_back(p3);
    v0.push_back(p4);

    std::vector<Point> v1;
    v1.push_back(point1);
    v1.push_back(point2);
    // pub_key_points(key_points_pub, v1);

    std::vector<Point> v2;
    v2.push_back(p01);
    v2.push_back(p02);
    v2.push_back(p03);
    v2.push_back(p04);
    // cout<<"p1:("<<p1.x<<", "<<p1.y<<")"<<endl;
    // cout<<"p2:("<<p2.x<<", "<<p2.y<<")"<<endl;
    // cout<<"p3:("<<p3.x<<", "<<p3.y<<")"<<endl;
    // cout<<"p4:("<<p4.x<<", "<<p4.y<<")"<<endl;
    pub_line_strip(line_strip_pub, v2);
    float ax[4] = {p01.x,p02.x,p03.x,p04.x};
    float ay[4] = {p01.y,p02.y,p03.y,p04.y};
    float xmin=ax[0], ymin=ay[0];
    float xmax=ax[0], ymax=ay[0];
    for(int i=1; i<4; ++i)
    {
        if(xmin>ax[i])
            xmin=ax[i];
        if(ymin>ay[i])
            ymin=ay[i];
        if(xmax<ax[i])
            
        if(ymax<ay[i])
            ymax=ay[i];
    }

    Point pt1(xmin,ymin,0);
    Point pt2(xmax,ymax,0);
    std::vector<Point> v3;
    v1.push_back(pt1);
    v1.push_back(pt2);
    pub_key_points(key_points_pub, v3);
    int x_min = static_cast<int>(xmin * 10.0);
    int y_min = static_cast<int>(ymin * 10.0);
    int x_max = static_cast<int>(xmax * 10.0);
    int y_max = static_cast<int>(ymax * 10.0);
    cout<<xmin<<",,"<<ymin<<endl;
    cout<<xmax<<",,"<<ymax<<endl;
}

void pub_line_strip(const ros::Publisher& pub, const std::vector<Point>& points)
{
    visualization_msgs::Marker  line_strip;
    markerInit(line_strip);
    line_strip.type = visualization_msgs::Marker::LINE_STRIP;
    line_strip.scale.x = 0.1;

    line_strip.color.r = 0.0f;
    line_strip.color.g = 0.0f;
    line_strip.color.b = 1.0f;
    line_strip.color.a = 1.0;

    for(int i=0; i<points.size(); ++i)
    {
        geometry_msgs::Point p;
        p.x = points[i].x;
        p.y = points[i].y;
        p.z = 0.0;
        line_strip.points.push_back(p);
    }
    pub.publish(line_strip);
}

void pub_key_points(const ros::Publisher& pub, const std::vector<Point>& key_points)
{
    visualization_msgs::Marker points;
    markerInit(points);
    points.type = visualization_msgs::Marker::POINTS;

    points.scale.x = 0.3;
    points.scale.y = 0.3;

    points.color.r = 0.0f;
    points.color.g = 1.0f;
    points.color.b = 0.0f;
    points.color.a = 1.0;

    for(int i=0; i<key_points.size(); ++i)
    {
        geometry_msgs::Point p;
        p.x = key_points[i].x;
        p.y = key_points[i].y;
        p.z = 0.0;//ROS_INFO("%F, %F",(float)p.x, (float)p.y);
        points.points.push_back(p);
    }
    pub.publish(points);
}

void pub_spline_points(const ros::Publisher& pub, const std::vector<Point>& key_points)
{
    visualization_msgs::Marker points;
    markerInit(points);
    points.type = visualization_msgs::Marker::POINTS;

    points.scale.x = 0.2;
    points.scale.y = 0.2;

    points.color.r = 0.0f;
    points.color.g = 1.0f;
    points.color.b = 0.0f;
    points.color.a = 1.0;

    for(int i=0; i<key_points.size(); ++i)
    {
        geometry_msgs::Point p;
        p.x = key_points[i].x;
        p.y = key_points[i].y;
        p.z = 0.0;//ROS_INFO("%F, %F",(float)p.x, (float)p.y);
        points.points.push_back(p);
    }
    pub.publish(points);
}

void pub_seeds(const ros::Publisher& pub, const std::vector<std::vector<Vertex>>& seeds)
{
    visualization_msgs::Marker points;
    markerInit(points);
    points.type = visualization_msgs::Marker::POINTS;

    points.scale.x = 0.2;
    points.scale.y = 0.2;

    points.color.r = 0.0f;
    points.color.g = 1.0f;
    points.color.b = 0.0f;
    points.color.a = 0.5;

    for(int i=0; i<seeds.size(); ++i)
    {
        for(int j=0; j<seeds[i].size(); ++j)
        {
            geometry_msgs::Point p;
            p.x = seeds[i][j].point.x;
            p.y = seeds[i][j].point.y;
            p.z = 0.0;
            points.points.push_back(p);
        }    
    }
    pub.publish(points);
}

void pub_obstacles(const ros::Publisher& pub, const std::vector<std::vector<Point>>& seeds)
{
    visualization_msgs::Marker points;
    markerInit(points);
    points.type = visualization_msgs::Marker::POINTS;

    points.scale.x = 0.2;
    points.scale.y = 0.2;
    //指定marker的颜色。每个成员应该在0和1之间。
    //marker.color.a(alpha)值为0意味着完全透明，1意味着完全不透明。
    points.color.r = 1.0f;
    points.color.g = 0.0f;
    points.color.b = 0.0f;
    points.color.a = 1.0;

    for(int i=0; i<seeds.size(); ++i)
    {
        for(int j=0; j<seeds[i].size(); ++j)
        {
            geometry_msgs::Point p;
            p.x = seeds[i][j].x;
            p.y = seeds[i][j].y;
            p.z = 0.0;
            points.points.push_back(p);
        }    
    }
    pub.publish(points);
}

void markerInit(visualization_msgs::Marker& marker)
{
    marker.header.frame_id = "/base_link";
    marker.header.stamp =  ros::Time::now();
    marker.ns = "points_and_lines";
    marker.action = visualization_msgs::Marker::ADD;
    marker.pose.orientation.w =  1.0;
    marker.id = 1;
}
